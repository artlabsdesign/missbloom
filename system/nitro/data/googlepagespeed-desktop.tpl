{
 "kind": "pagespeedonline#result",
 "id": "http://missbloom.ru/",
 "responseCode": 200,
 "title": "Miss Bloom - доставка интересных букетов.",
 "score": 76,
 "pageStats": {
  "numberResources": 73,
  "numberHosts": 8,
  "totalRequestBytes": "7314",
  "numberStaticResources": 64,
  "htmlResponseBytes": "42852",
  "cssResponseBytes": "238504",
  "imageResponseBytes": "88703",
  "javascriptResponseBytes": "627770",
  "otherResponseBytes": "338870",
  "numberJsResources": 32,
  "numberCssResources": 14
 },
 "formattedResults": {
  "locale": "en_US",
  "ruleResults": {
   "AvoidLandingPageRedirects": {
    "localizedRuleName": "Avoid landing page redirects",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page has no redirects. Learn more about avoiding landing page redirects.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/AvoidRedirects"
        }
       ]
      }
     }
    ]
   },
   "EnableGzipCompression": {
    "localizedRuleName": "Enable compression",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have compression enabled. Learn more about enabling compression.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/EnableCompression"
        }
       ]
      }
     }
    ]
   },
   "LeverageBrowserCaching": {
    "localizedRuleName": "Leverage browser caching",
    "ruleImpact": 10.491071428571429,
    "urlBlocks": [
     {
      "header": {
       "format": "Setting an expiry date or a maximum age in the HTTP headers for static resources instructs the browser to load previously downloaded resources from local disk rather than over the network."
      }
     },
     {
      "header": {
       "format": "Leverage browser caching for the following cacheable resources:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/LeverageBrowserCaching"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/button-search.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/cart_circle.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/icon_facebook.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/icon_instagram.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/maestro-curved-32px.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/mastercard-curved-32px.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/paypal-curved-32px.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/scroll.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/slider-arrows.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/testimonials/stars-4.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/visa-curved-32px.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/visa-electron-curved-32px.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/cache/data/%D0%BE%D1%82%D0%B7%D1%8B%D0%B2%D1%8B/73f6ad74ab82-70x70.jpg"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/cache/data/%D0%BE%D1%82%D0%B7%D1%8B%D0%B2%D1%8B/b8a1158b9354-70x70.jpg"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/cache/data/%D0%BE%D1%82%D0%B7%D1%8B%D0%B2%D1%8B/woman_flowers-70x70.jpg"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/cache/data/devotion-70x70.jpg"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/cache/data/hyp-200x200.jpg"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/data/logo_missbloom2.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/flags/ru.png"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "https://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"
          },
          {
           "type": "DURATION",
           "value": "60 minutes"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "http://www.google-analytics.com/analytics.js"
          },
          {
           "type": "DURATION",
           "value": "2 hours"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MainResourceServerResponseTime": {
    "localizedRuleName": "Reduce server response time",
    "ruleImpact": 1.8,
    "urlBlocks": [
     {
      "header": {
       "format": "In our test, your server responded in $1. There are many factors that can slow down your server response time. Please read our recommendations to learn how you can monitor and measure where your server is spending the most time.",
       "args": [
        {
         "type": "DURATION",
         "value": "0.38 seconds"
        },
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/Server"
        }
       ]
      }
     }
    ]
   },
   "MinifyCss": {
    "localizedRuleName": "Minify CSS",
    "ruleImpact": 0.5171,
    "urlBlocks": [
     {
      "header": {
       "format": "Compacting CSS code can save many bytes of data and speed up download and parse times."
      }
     },
     {
      "header": {
       "format": "Minify CSS for the following resources to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        },
        {
         "type": "BYTES",
         "value": "3.4KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "14%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/stylesheet_circular.css"
          },
          {
           "type": "BYTES",
           "value": "1.8KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "10%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/ui/themes/ui-lightness/jquery-ui-1.8.16.custom.css"
          },
          {
           "type": "BYTES",
           "value": "1.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "28%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MinifyHTML": {
    "localizedRuleName": "Minify HTML",
    "ruleImpact": 0.1396,
    "urlBlocks": [
     {
      "header": {
       "format": "Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up download and parse times."
      }
     },
     {
      "header": {
       "format": "Minify HTML for the following resources to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        },
        {
         "type": "BYTES",
         "value": "1.4KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "15%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/"
          },
          {
           "type": "BYTES",
           "value": "1.4KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "15%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MinifyJavaScript": {
    "localizedRuleName": "Minify JavaScript",
    "ruleImpact": 1.7252000000000003,
    "urlBlocks": [
     {
      "header": {
       "format": "Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time."
      }
     },
     {
      "header": {
       "format": "Minify JavaScript for the following resources to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        },
        {
         "type": "BYTES",
         "value": "12.1KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "42%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/count/jquery.countdown.js"
          },
          {
           "type": "BYTES",
           "value": "4.3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "48%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/count/jquery.plugin.js"
          },
          {
           "type": "BYTES",
           "value": "2.3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "63%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.mb.YTPlayer.js"
          },
          {
           "type": "BYTES",
           "value": "2.1KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "21%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.easing.min.js"
          },
          {
           "type": "BYTES",
           "value": "1,015B"
          },
          {
           "type": "PERCENTAGE",
           "value": "53%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/ui/external/jquery.cookie.js"
          },
          {
           "type": "BYTES",
           "value": "935B"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/appear.js"
          },
          {
           "type": "BYTES",
           "value": "924B"
          },
          {
           "type": "PERCENTAGE",
           "value": "50%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/scrolltopcontrol.js"
          },
          {
           "type": "BYTES",
           "value": "671B"
          },
          {
           "type": "PERCENTAGE",
           "value": "41%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MinimizeRenderBlockingResources": {
    "localizedRuleName": "Eliminate render-blocking JavaScript and CSS in above-the-fold content",
    "ruleImpact": 14.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page has $1 blocking script resources and $2 blocking CSS resources. This causes a delay in rendering your page.",
       "args": [
        {
         "type": "INT_LITERAL",
         "value": "31"
        },
        {
         "type": "INT_LITERAL",
         "value": "14"
        }
       ]
      }
     },
     {
      "header": {
       "format": "None of the above-the-fold content on your page could be rendered without waiting for the following resources to load. Try to defer or asynchronously load blocking resources, or inline the critical portions of those resources directly in the HTML."
      }
     },
     {
      "header": {
       "format": "Remove render-blocking JavaScript:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/BlockingJS"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "https://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/modernizr.custom.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/selectnav.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/common.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/custom_scripts.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/selectnav.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/ui/external/jquery.cookie.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/jquery.jcarousel.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/colorbox/jquery.colorbox-min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/count/jquery.plugin.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/count/jquery.countdown.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/count/jquery.countdown-ru.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.easing.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/jquery.cycle.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/flex/jquery.flexslider-min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/tipsy/jquery.tipsy.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/owl-carousel/owl.carousel.min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/paralax/jquery.parallax-1.1.3.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.mb.YTPlayer.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.scrollTo-min.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/appear.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.ajax_search.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.typewatch.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.highlight.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.requestAnimationFrame.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/jquery.mousewheel.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/ilightbox.packed.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/scrolltopcontrol.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/isotope.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/tabs.js"
          }
         ]
        }
       }
      ]
     },
     {
      "header": {
       "format": "Optimize CSS Delivery of the following:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/font-awesome.min.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/load.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/stylesheet_circular.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "https://fonts.googleapis.com/css?family=Open+Sans:400,600,700&subset=latin,cyrillic,latin-ext,greek"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/responsive.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/ui/themes/ui-lightness/jquery-ui-1.8.16.custom.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/javascript/jquery/colorbox/colorbox.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/flex/flexslider.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/tipsy/css.tipsy.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/owl-carousel/owl.carousel.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/js/owl-carousel/owl.theme.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/ajax_search.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/ilightbox.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/stylesheet/metro-black-skin/skin.css"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "OptimizeImages": {
    "localizedRuleName": "Optimize images",
    "ruleImpact": 1.7409000000000003,
    "urlBlocks": [
     {
      "header": {
       "format": "Properly formatting and compressing images can save many bytes of data."
      }
     },
     {
      "header": {
       "format": "Optimize the following images to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/OptimizeImages"
        },
        {
         "type": "BYTES",
         "value": "13.9KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "32%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/image/data/logo_missbloom2.png"
          },
          {
           "type": "BYTES",
           "value": "11.3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "29%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/scroll.png"
          },
          {
           "type": "BYTES",
           "value": "983B"
          },
          {
           "type": "PERCENTAGE",
           "value": "81%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/cart_circle.png"
          },
          {
           "type": "BYTES",
           "value": "832B"
          },
          {
           "type": "PERCENTAGE",
           "value": "63%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://missbloom.ru/catalog/view/theme/ULTIMATUM/image/button-search.png"
          },
          {
           "type": "BYTES",
           "value": "794B"
          },
          {
           "type": "PERCENTAGE",
           "value": "64%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "PrioritizeVisibleContent": {
    "localizedRuleName": "Prioritize visible content",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have the above-the-fold content properly prioritized. Learn more about prioritizing visible content.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent"
        }
       ]
      }
     }
    ]
   }
  }
 },
 "version": {
  "major": 1,
  "minor": 15
 }
}
